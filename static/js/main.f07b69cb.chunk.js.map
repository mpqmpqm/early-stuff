{"version":3,"sources":["components/Album.js","components/Albums.js","App.js","serviceWorker.js","index.js"],"names":["Album","props","loading","title","year","Albums","foundAct","titles","years","App","handleSubmit","bind","handleChange","state","data","value","artist","header","event","this","setState","target","preventDefault","fetch","then","response","json","results","length","id","i","releases","push","foundData","console","log","reset","focus","className","onSubmit","type","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f07b69cb.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nfunction Album (props) {\r\n    \r\n    if (props.loading) {\r\n        return <h3>Loading...</h3>\r\n    }\r\n\r\n    else if (props.title) {\r\n        return <h3>{props.title} {props.year ? `(${props.year})` : null}</h3>\r\n    }\r\n\r\n    else {\r\n        return null\r\n    }\r\n}\r\n\r\nexport default Album","import React from 'react' \r\nimport Album from './Album'\r\n\r\nfunction Albums (props) {\r\n    \r\n    if (!props.foundAct) {\r\n        return null\r\n    }\r\n    \r\n    else if (props.loading) {\r\n        return <h3>Loading...</h3>\r\n    }\r\n    else {\r\n        return (\r\n            <div>\r\n                <Album title = {props.titles[0]} year = {props.years[0]} loading = {props.loading}/>\r\n                <Album title = {props.titles[1]} year = {props.years[1]} loading = {props.loading}/>\r\n                <Album title = {props.titles[2]} year = {props.years[2]} loading = {props.loading}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Albums\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Albums from \"./components/Albums\"\r\n\r\n//Discogs key: tYumlFYEMwUXeeIURptE\r\n//Discogs secret: wDhnGZAYPXjdhQDHWdduAXHQAbAjnCAE\r\n\r\nconst discogsKey = 'tYumlFYEMwUXeeIURptE'\r\nconst discogsSecret = 'wDhnGZAYPXjdhQDHWdduAXHQAbAjnCAE'\r\n\r\nclass App extends React.Component {\r\n\r\n\tconstructor () {\r\n\t\tsuper ();\r\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\r\n\t\tthis.handleChange = this.handleChange.bind(this);\r\n\t\tthis.state = {\r\n\t\t\tloading: false,\r\n\t\t\tdata: {},\r\n\t\t\tvalue: '',\r\n\t\t\tfoundAct: false,\r\n\t\t\tartist: [],\r\n\t\t\ttitles: [],\r\n\t\t\tyears: [],\r\n\t\t\theader: 'Enter a musical act'\r\n\t\t}\r\n\t}\r\n\r\n\thandleChange (event) {\r\n\t\tthis.setState ({\r\n\t\t\tvalue: event.target.value\r\n\t\t})\r\n\t}\r\n\r\n\thandleSubmit (event) {\r\n\t\tevent.preventDefault();\r\n\r\n\t\tthis.setState ({header: 'Loading...', loading: true})\r\n\r\n\t\tfetch (`https://api.discogs.com/database/search?type=artist&q=${this.state.value}&key=${discogsKey}&secret=${discogsSecret}`)\r\n\t\t\t.then (response => response.json())\r\n\t\t\t\t.then (data => {\r\n\t\t\t\t\tthis.setState ({data: data})})\r\n\t\t\t\t\t\t.then (() => \r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif (this.state.data.results.length > 0) {\r\n\r\n\t\t\t\t\t\t\t\t// console.log(this.state.data.results[0].id);\r\n\t\t\t\t\t\t\t\tthis.setState({header: this.state.data.results[0].title, foundAct: true})\r\n\r\n\t\t\t\t\t\t\t\t\tfetch (`https://api.discogs.com/artists/${this.state.data.results[0].id}/releases?year,asc`)\r\n\t\t\t\t\t\t\t\t\t\t.then (response => response.json())\r\n\t\t\t\t\t\t\t\t\t\t\t.then (data => {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet i = 0;\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet titles = []\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet years = []\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tfor (i; i < data.releases.length; i++) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (i > 2) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitles.push (data.releases[i].title)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tyears.push (data.releases[i].year)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t// console.log(years);\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tthis.setState ({\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// artist: data.releases[0].artist,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitles: titles,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tyears: years,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tfoundData: true,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tloading: false\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// header: data.releases[0].artist\r\n\t\t\t\t\t\t\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(this.state.years[0]);\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t// console.log(data.releases[i].artist, data.releases[i].title, data.releases[i].format);})\r\n\t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tthis.setState ({foundData: false, header: 'Not found, please try again.', loading: false, foundAct: false});\r\n\t\t\t\t\t\t\t\t}})\r\n\r\n\t\t\r\n\t\tevent.target.reset();\r\n\t\tevent.target.focus();\r\n\r\n  }\r\n\r\n\r\n\trender () {\r\n\r\n\t\treturn (\r\n\t\t\t<div className = 'app'>\r\n\r\n\t\t\t\t<h1>I liked their early stuff better...</h1>\r\n\r\n\t\t\t\t<form onSubmit={this.handleSubmit}>\r\n\t\t\t\t\t<input type=\"text\" onChange={this.handleChange}/>\r\n\t\t\t\t\t<input type=\"submit\" value='Submit'/>\r\n\t\t\t\t</form>\r\n\t\t\t\t<div className = 'info'>\r\n\t\t\t\t\t{/* <img \r\n\t\t\t\t\t\tsrc = {this.state.foundData ? this.state.data.results[0].thumb : null} \r\n\t\t\t\t\t\talt = 'img' \r\n\t\t\t\t\t\tstyle = {{display: this.state.foundData ? 'block' : 'none'}}\r\n\t\t\t\t\t/> */}\r\n\r\n\t\t\t\t\t<h2>{this.state.header}</h2>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<Albums titles={this.state.titles} years = {this.state.years} loading = {this.state.loading} foundAct = {this.state.foundAct}/>\r\n\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t\t}\r\n\r\n\t}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}